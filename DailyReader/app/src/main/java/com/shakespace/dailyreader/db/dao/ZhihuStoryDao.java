package com.shakespace.dailyreader.db.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.shakespace.dailyreader.db.dao.converter.StringConverter;
import java.util.List;

import com.shakespace.dailyreader.bean.ZhihuStory;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ZHIHU_STORY".
*/
public class ZhihuStoryDao extends AbstractDao<ZhihuStory, Long> {

    public static final String TABLENAME = "ZHIHU_STORY";

    /**
     * Properties of entity ZhihuStory.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Title = new Property(0, String.class, "title", false, "TITLE");
        public final static Property Ga_prefix = new Property(1, String.class, "ga_prefix", false, "GA_PREFIX");
        public final static Property Multipic = new Property(2, boolean.class, "multipic", false, "MULTIPIC");
        public final static Property Date = new Property(3, String.class, "date", false, "DATE");
        public final static Property Type = new Property(4, int.class, "type", false, "TYPE");
        public final static Property Id = new Property(5, Long.class, "id", true, "_id");
        public final static Property Images = new Property(6, String.class, "images", false, "IMAGES");
    }

    private final StringConverter imagesConverter = new StringConverter();
    private Query<ZhihuStory> zhihuDailyBean_StoriesQuery;

    public ZhihuStoryDao(DaoConfig config) {
        super(config);
    }
    
    public ZhihuStoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ZHIHU_STORY\" (" + //
                "\"TITLE\" TEXT," + // 0: title
                "\"GA_PREFIX\" TEXT," + // 1: ga_prefix
                "\"MULTIPIC\" INTEGER NOT NULL ," + // 2: multipic
                "\"DATE\" TEXT," + // 3: date
                "\"TYPE\" INTEGER NOT NULL ," + // 4: type
                "\"_id\" INTEGER PRIMARY KEY ," + // 5: id
                "\"IMAGES\" TEXT);"); // 6: images
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ZHIHU_STORY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ZhihuStory entity) {
        stmt.clearBindings();
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(1, title);
        }
 
        String ga_prefix = entity.getGa_prefix();
        if (ga_prefix != null) {
            stmt.bindString(2, ga_prefix);
        }
        stmt.bindLong(3, entity.getMultipic() ? 1L: 0L);
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(4, date);
        }
        stmt.bindLong(5, entity.getType());
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(6, id);
        }
 
        List images = entity.getImages();
        if (images != null) {
            stmt.bindString(7, imagesConverter.convertToDatabaseValue(images));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ZhihuStory entity) {
        stmt.clearBindings();
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(1, title);
        }
 
        String ga_prefix = entity.getGa_prefix();
        if (ga_prefix != null) {
            stmt.bindString(2, ga_prefix);
        }
        stmt.bindLong(3, entity.getMultipic() ? 1L: 0L);
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(4, date);
        }
        stmt.bindLong(5, entity.getType());
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(6, id);
        }
 
        List images = entity.getImages();
        if (images != null) {
            stmt.bindString(7, imagesConverter.convertToDatabaseValue(images));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5);
    }    

    @Override
    public ZhihuStory readEntity(Cursor cursor, int offset) {
        ZhihuStory entity = new ZhihuStory( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // title
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ga_prefix
            cursor.getShort(offset + 2) != 0, // multipic
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // date
            cursor.getInt(offset + 4), // type
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // id
            cursor.isNull(offset + 6) ? null : imagesConverter.convertToEntityProperty(cursor.getString(offset + 6)) // images
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ZhihuStory entity, int offset) {
        entity.setTitle(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setGa_prefix(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMultipic(cursor.getShort(offset + 2) != 0);
        entity.setDate(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setType(cursor.getInt(offset + 4));
        entity.setId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setImages(cursor.isNull(offset + 6) ? null : imagesConverter.convertToEntityProperty(cursor.getString(offset + 6)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ZhihuStory entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ZhihuStory entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ZhihuStory entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "stories" to-many relationship of ZhihuDailyBean. */
    public List<ZhihuStory> _queryZhihuDailyBean_Stories(String date) {
        synchronized (this) {
            if (zhihuDailyBean_StoriesQuery == null) {
                QueryBuilder<ZhihuStory> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Date.eq(null));
                zhihuDailyBean_StoriesQuery = queryBuilder.build();
            }
        }
        Query<ZhihuStory> query = zhihuDailyBean_StoriesQuery.forCurrentThread();
        query.setParameter(0, date);
        return query.list();
    }

}
